@using PROJECT.Models


@{
    /**/

    ViewBag.Title = "Index";
    List<ApplicationUser> users = ViewBag.Search;
}

@section style{
    <style>
        * {
            box-sizing: border-box;
        }

        body {
            font: 16px Arial;
        }

        /*the container must be positioned relative:*/
        .autocomplete {
            position: relative;
            display: inline-block;
        }

        input {
            border: 1px solid transparent;
            background-color: #f1f1f1;
            padding: 10px;
            font-size: 16px;
        }

            input[type=text] {
                background-color: #f1f1f1;
                width: 100%;
            }

            input[type=submit] {
                background-color: DodgerBlue;
                color: #fff;
                cursor: pointer;
            }

        .autocomplete-items {
            position: absolute;
            border: 1px solid #d4d4d4;
            border-bottom: none;
            border-top: none;
            z-index: 99;
            /*position the autocomplete items to be the same width as the container:*/
            top: 100%;
            left: 0;
            right: 0;
        }

            .autocomplete-items div {
                padding: 10px;
                cursor: pointer;
                background-color: #fff;
                border-bottom: 1px solid #d4d4d4;
            }

                /*when hovering an item:*/
                .autocomplete-items div:hover {
                    background-color: #e9e9e9;
                }

        /*when navigating through the items using the arrow keys:*/
        .autocomplete-active {
            background-color: DodgerBlue !important;
            color: #ffffff;
        }
    </style>
}

@using (Html.BeginForm("Search", "Request", FormMethod.Post, new { @class = "form-horizontal", role = "form", enctype = "multipart/form-data" }))
{
    <!--<div class="input-group mb-3">
            <div class="input-group-prepend">
                <span class="input-group-text" id="basic-addon1"><i class="fa fa-search"></i></span>
            </div>
            <input type="text" id="Username" name="Username" class="form-control" placeholder="Username" aria-label="Username" aria-describedby="basic-addon1">
        myCountry
        </div>-->
    <div class="autocomplete" style="width:300px;">
        <input id="myInput" type="text" name="Username" placeholder="Country">
    </div>
    <input type="submit">
}


<br />
@if (users != null)
{
    foreach (var user in users)
    {
        <div class="container">
            <div class="card mx-auto" style="width:400px">
                <img class="card-img-top" src="~/Request/File/?id=@user.Id" alt="Card image" style="width:100%">
                <div class="card-body">
                    <h4 class="card-title">@user.UserName</h4>
                    <p class="card-text">@user.Bio</p>


                    @Html.Hidden("UserID", @user.Id)
                    <button type="submit" class="btn btn-primary" onclick="send()">Send Request</button>


                </div>
            </div>
        </div>
    }

}

@section scripts{
    <script src="~/Scripts/notify.js"></script>
    <script>
        function send() {
            debugger;
            var UserID = $("#UserID").val();
            $.ajax
                ({
                    url: '/Request/Send',
                    type: 'POST',
                    datatype: "json",
                    contentType: 'application/json',
                    data: JSON.stringify({
                        UserID: UserID
                    }),
                    //data: {
                    //     state : stateId
                    //  },

                    success: function (status) {
                        if (status == "Request Sent") {
                            //$.notify("Request Sent", "success");
                            $(".btn").notify("Request Sent", "success");
                        }
                        if (status == "Request Already Sent") {
                            //$.notify("Request Already Sent", "success");
                            $(".btn").notify("Request Already Sent", "error");
                        }


                    },
                    error: function () {
                        alert("Whooaaa! Something went wrong..")
                    },
                });
        }
    </script>


    <script>


        /*An array containing all the country names in the world:*/
        $(document).ready(function () {
            var countries;
            $.ajax
                ({
                    url: '/Request/GetAllUserName',
                    type: 'GET',
                    datatype: "json",
                    contentType: 'application/json',
                    //data: {
                    //     state : stateId
                    //  },

                    success: function (usernames) {
                        countries = $.parseJSON(usernames);
                        //console.log(usernames);
                        //console.log(countries);
                        //console.log(document.getElementById("myInput"));
                        autocomplete(document.getElementById("myInput"), countries);

                    },
                    error: function () {
                        alert("Whooaaa! Something went wrong..")
                    },
                });

            function autocomplete(inp, arr) {
                //console.log("inside auto complete",inp,arr)
                /*the autocomplete function takes two arguments,
                the text field element and an array of possible autocompleted values:*/
                var currentFocus;
                /*execute a function when someone writes in the text field:*/
                inp.addEventListener("input", function (e) {
                    var a, b, i, val = this.value;
                    /*close any already open lists of autocompleted values*/
                    closeAllLists();
                    if (!val) { return false; }
                    currentFocus = -1;
                    /*create a DIV element that will contain the items (values):*/
                    a = document.createElement("DIV");
                    a.setAttribute("id", this.id + "autocomplete-list");
                    a.setAttribute("class", "autocomplete-items");
                    console.log(a);
                    /*append the DIV element as a child of the autocomplete container:*/
                    this.parentNode.appendChild(a);
                    /*for each item in the array...*/
                    for (i = 0; i < arr.length; i++) {
                        //console.log(arr[i]);
                        /*check if the item starts with the same letters as the text field value:*/
                        if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                            /*create a DIV element for each matching element:*/
                            b = document.createElement("DIV");
                            /*make the matching letters bold:*/
                            b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                            b.innerHTML += arr[i].substr(val.length);
                            /*insert a input field that will hold the current array item's value:*/
                            b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                            /*execute a function when someone clicks on the item value (DIV element):*/
                            b.addEventListener("click", function (e) {
                                /*insert the value for the autocomplete text field:*/
                                inp.value = this.getElementsByTagName("input")[0].value;
                                /*close the list of autocompleted values,
                                (or any other open lists of autocompleted values:*/
                                closeAllLists();
                            });
                            a.appendChild(b);
                        }
                    }
                });
                /*execute a function presses a key on the keyboard:*/
                inp.addEventListener("keydown", function (e) {
                    var x = document.getElementById(this.id + "autocomplete-list");
                    if (x) x = x.getElementsByTagName("div");
                    if (e.keyCode == 40) {
                        /*If the arrow DOWN key is pressed,
                        increase the currentFocus variable:*/
                        currentFocus++;
                        /*and and make the current item more visible:*/
                        addActive(x);
                    } else if (e.keyCode == 38) { //up
                        /*If the arrow UP key is pressed,
                        decrease the currentFocus variable:*/
                        currentFocus--;
                        /*and and make the current item more visible:*/
                        addActive(x);
                    } else if (e.keyCode == 13) {
                        /*If the ENTER key is pressed, prevent the form from being submitted,*/
                        e.preventDefault();
                        if (currentFocus > -1) {
                            /*and simulate a click on the "active" item:*/
                            if (x) x[currentFocus].click();
                        }
                    }
                });
                function addActive(x) {
                    /*a function to classify an item as "active":*/
                    if (!x) return false;
                    /*start by removing the "active" class on all items:*/
                    removeActive(x);
                    if (currentFocus >= x.length) currentFocus = 0;
                    if (currentFocus < 0) currentFocus = (x.length - 1);
                    /*add class "autocomplete-active":*/
                    x[currentFocus].classList.add("autocomplete-active");
                }
                function removeActive(x) {
                    /*a function to remove the "active" class from all autocomplete items:*/
                    for (var i = 0; i < x.length; i++) {
                        x[i].classList.remove("autocomplete-active");
                    }
                }
                function closeAllLists(elmnt) {
                    /*close all autocomplete lists in the document,
                    except the one passed as an argument:*/
                    var x = document.getElementsByClassName("autocomplete-items");
                    for (var i = 0; i < x.length; i++) {
                        if (elmnt != x[i] && elmnt != inp) {
                            x[i].parentNode.removeChild(x[i]);
                        }
                    }
                }
                /*execute a function when someone clicks in the document:*/
                document.addEventListener("click", function (e) {
                    closeAllLists(e.target);
                });
            }
        });


            /*initiate the autocomplete function on the "myInput" element, and pass along the countries array as possible autocomplete values:*/

    </script>
}

